## Why Begin Building My Blog in 2022

For a considerable time, I have felt reticent about expressing myself publicly, whether it be my ideas or actions. Regardless, I dream of becoming a full-time open-source developer or a freelancer. Admittedly, this is an arduous undertaking, but there is no doubt that building in public is the first step.

Building in public not only validates your ideas but also increases your chances of fortuitous encounters, as described in [this article](https://github.com/readme/guides/publishing-your-work).

In this blog, I will share my ideas, attempts, and creations.

The first thing I would like to share is how I built my blog site in 2022.

## How It Works

### Requirements

I chose not to use any popular blog-building tools and instead started from scratch because I wanted to have control over my site. When I was new to front-end development, I used `VuePress` to build my site, but I found myself repeatedly having to pull, commit, and push files from my computer every time I created or edited a post. Although `VuePress` is a great tool, it distracted me from focusing on writing.

Therefore, I had some hard requirements for this blog site: I needed to focus on writing itself, and I wanted to be able to edit my content whenever and wherever I desired.

### Tech Stack

I selected the following technologies to build my site:

- `Next.js`: I am more comfortable with it than any other framework. Also, `ISR` is one of its main features, which I will describe later.
- `Tailwind`: It's amazing.
- `Stitches`: Previously I used `styled-components` as my `CSS-in-JS` solution, but when I discovered `stitches`, I was drawn to its type-safe API design. Currently, I use `stitches` with `tailwind` as my style solution.
- `Mayumi`: A MacOS-style UI library created by myself.
- `GitHub Issues`: I prefer using `GitHub Issues` as my dataset because it has a visual interface. Moreover, when you link another issue in issue content, it appears as a duplicate link.

### Next.js ISR

`Next.js` was perhaps the most challenging aspect of building my blog site. Rather than using `SSR`, I opted for [`ISR`](https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration), an advanced version of `SSG`. For a blog site, where most blog posts are static, `ISR` is particularly suitable.

If you spend some time browsing my website, you will notice two main components:

- `/issues`: This lists all available posts (already published to the public).
- `/issues/[id]`: This displays post content.

The beauty of `ISR` is that when I create a new post, it updates `/issues` and `/issues/[id]` on the backend. If I only make changes to issue content, I can choose to re-update the `/issues/[id]` page via the API `unstable_revalidate()`.

```ts
// /pages/api/revalidate
// ...
console.log('[Next.js] Revalidating /issues')
await res.unstable_revalidate('/issues')
if (issueNumber) {
  console.log(`[Next.js] Revalidating /issues/id/${issueNumber}`)
  await res.unstable_revalidate(`/issues/id/${issueNumber}`)
}
// ...
```

To manually update `/issues` or `/issues/[id]`, I created an API route called `/pages/api/revalidate`. This eliminates the hassle of repeated manual deployments.

***But how do I know when to call `/revalidate`?***

All my blog content is saved in `GitHub Issues`. When I modify an issue, GitHub triggers a signal event that invokes valid workflows. In the following GitHub workflow, I can call `unstable_revalidate`.

```yaml
name: Revalidate
on:
  issues:
    types: ["opened", "edited", "labeled", "deleted", "closed", "reopened"]
  push:
    branches: ["main", "master"]
  label:
jobs:
  Revalidate:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: revalidate
         uses: actions/github-script@v6
         env:
           AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
         with:
           script: |
             // revalidate `/issues` page
```

I can write/edit/delete posts anytime, anywhere.

## Organizing with Labels

***How can I preview posts before they are ready to publish to the public?***

I separated the articles into two categories using GitHub labels named `issue-dev` and `issue`:

- In the `Vercel` preview & dev environment, I can access the issue content with `issue` and `issue-dev` labels.
- In the `Vercel` production environment, I can access the issue content with the `issue` label only.

## The End

That concludes my personal blog, but it is not the end. I will continue updating this post with new blog site features.

Currently, it is still young, but I love it both for its UI and experience. I hope you'll enjoy it, too.

I'd also like to add more awesome features, such as:

- RSS and newsletter subscriptions
- Videos display
- Membership based on GitHub sponsorship
- And a simple comment system to receive feedback.

*And so on...*