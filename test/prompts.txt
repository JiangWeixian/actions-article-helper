I want you to act as an English translator, spelling corrector and improver. I will speak to you in any language and you will detect the language, translate it and answer in the corrected and improved version of my text, in English. I want you to replace my simplified A0-level words and sentences with more beautiful and elegant, upper level English words and sentences. Keep the meaning same, but make them more literary. I want you to only reply the correction, the improvements and nothing else, do not write explanations. My markdown format article content is "## Why start build my blog in 2022

For a long time, I always shame to express myself in public. Either in terms of ideas or what I was doing. However, I dream to be fulltime open-source developer or a freelance. I know It's a tough, but no doubt, #build-in-public is the first step.

#build-in-public not only help you [validate your ideas](https://blog.pragmaticengineer.com/how-to-become-a-full-time-creator/,), it can also [make you lucky area became larger](https://github.com/readme/guides/publishing-your-work).

In here, I will share my ideas and attemps, and of course what I created.

First thing I want share is *How I build my blog site in 2022*.

## How it work

### Requirements

The reason I did't choose any popluar blog building tool, but start from scratch was that I wanted to take control of my site.

When I was new to front-end, I choose `vuepress` to build my site. Everytime, I create a new post or edit a post, I have to `pull & commit & push` on my computer over and over again. Even `vuepress` is great tool, but I can't get focus on writing in this way.

So I have some hard requirements for this blog site: I should focus on writing itself, and I want to be able to edit my content whenever and wherever I want.

### Stacks

I choose the following tech stack to build my site:

- `Next.js` I much familiar with it than other framework. Another main reason is `ISR`, I will talk about how it work later.
- `tailwind` It's awesome
- `stitches` I used to use `styled-components` as my `CSS-in-JS` solution. When I meet `stitches`, I love much type safe API design. Currently, I use `stitches` with `tailwind` as my style solution.
- `mayumi` A MacOS style UI libray, created by me.
- `github issue` I like use `github issue `as my datasets. Because it's a dataset with a visual interface. Not only that, when you link another issue in issue content, you can find it looks like duplicate link.

### Next.js ISR

Back to `Next.js`, maybe it's hardest part in my blog site. I choose [`ISR`](https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration) instead of `SSR`. `ISR` is something like the advanced version of `SSG`. For a blog site, lots of blog posts is much more "static", it's very suited to ISR.

If you can go through this website for a while, there are two main parts in this blog site

- `/issues` list all available posts(already published to public)
- `/issues/[id]` display post content

The great part of `ISR` is that, when I create a new post, it will re-update `/issues` and `/issues/[id]` at backend; If I only edit issue content, I can choose to re-update `/issues/[id]` page via  API `unstable_revalidate()`. 

```ts
// /pages/api/revalidate
// ...
console.log('[Next.js] Revalidating /issues')
await res.unstable_revalidate('/issues')
if (issueNumber) {
  console.log(`[Next.js] Revalidating /issues/id/${issueNumber}`)
  await res.unstable_revalidate(`/issues/id/${issueNumber}`)
}
// ...
```

I create a API route `/pages/api/revalidate` to update `/issues` or `/issues/[id]` manually. Get rid of the hell of repeated manual deployments over and over again.

***But How do I know the time to call `/revalidate`***

Remember, all my blog is saved in github issues. When I edit issue, github will trigger a event signal to invoke valid workflows. I can call `unstable_revalidate` in the following github workflow. 

```yaml
name: Revalidate
on:
  issues:
    types: ["opened", "edited", "labeled", "deleted", "closed", "reopened"]
  push:
    branches: ["main", "master"]
  label:
jobs:
  Revalidate:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: revalidate
         uses: actions/github-script@v6
         env:
           AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
         with:
           script: |
             // revalidate `/issues` page
```

I can `edit/create/delete` post anytime and anywhere.

## Organize with labels

***Before posts are ready to publish to public, how to preview it?***

I divided the articles into two categories by github label named `issue-dev` and `issue`.

- In `Vercel` preview & dev environment, we get the issue content with `issue` and `issue-dev` labels. 
- In `Vercel` production environment, we get the issue content with `issue` label only.

## The end

That's all about my personal blog, but not the end. I will continue update this post about blog site new features.

Currently, it's still young, but I like it a lot, both the UI and the experience. I hope you will like it too.

I'd also like to add more and more awesome features:

- rss and newsletter. 
- display video
- membership based on github sponsor
- And a simple comment system so I can receive feedbacks.

*So on...*"